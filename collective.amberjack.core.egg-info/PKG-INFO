Metadata-Version: 1.0
Name: collective.amberjack.core
Version: 1.0dev-r86273
Summary: The Amberjack layer
Home-page: https://svn.plone.org/svn/collective/collective.amberjack.core
Author: Massimo Azzolini
Author-email: massimo@redturtle.net
License: GPL
Description: Introduction
        ============
        
        This is the base egg for the amberjack (aj) based demos. It contains:
        - a default aj tour image
        - the aj javascript library
        - the skins
        - a stylesheet
        
        How does it work?
        =================
        All the tutorial is composed by four elements:
        - the aj javascript
        - the portlet
        - the demo.core
        - the demo.xxx (actually xxx is video)
        
        the base aj javascript has two lacks that let it not so useful in plone:
        - it doesn't manage a form submit: it looses the url parameters.
        - in plone if I view an obj, then I edit it, I save it, I newly get the same obj with the same url, but it's different.
        
        so, the aj base js has been modified:
        - instead url parameters you can use cookies (see the js code)
        - every step in the demo may be identified by both the url and a couple (dom path, content of that dom path)
        
        Run the video demo
        ==================
        Use the aj buildout from p4a:
        http://plone4artists.org/svn/projects/p4a.buildout/branches/amberjack/
        
        What's next?
        ============
        If you want to create a new demo you need at least:
        - p4a.amberjack
        - p4a.demo.core
        - p4a.demo.XXX (your new demo, see p4a.demo.video as a starting base)
        
        in the p4a.demo.xxx you have to define two things:
        - the aj demo, in other words the viewlet with the nested DIVs which create the base structure.
        - the custom javascript.
        there are two css classes that can be added to the plone elements: theAJClassBehavoiur and theAJClass.
        the first one is used to define some standard behaviours (e.g. if the element is clicked a cookie with the
        parameters tourId and skinId is set).
        the second one is used for layout purposes (e.g. for highlighting in yellow a button)
        
        To do list
        ==========
        
        initialize/erase the environment
        --------------------------
        we need to create an entry point where to put an ajax call to a plone where the a script (or whatever else..)
        creates all the objects needed by the tutorial/demo.
        At the end of the tutorial we need to delete the all the objects created.
        
        We should also think about creating a closed environment for each tutorial/demo. otherwise you cannot run more than a
        tutorial at once.
        
        Actually you need to manually create a basic structure according to the tour.
        
        
        prev next buttons
        -----------------
        we also need to complete the << >> behaviours behind those buttons:
        if I click on >> then, if the user hasn't completed his task, the >> button
        will do it for him.
        
        so we need to write the js code for each step of the tutorial. e.g.:
        the step has 3 substeps:
        - do A
        - do B
        - do C
        
        the code should do:
        for(task in steps){
        if (!completed(task)) complete(task)
        }
        Changelog
        =========
        
        1.0 (xxxx-xx-xx)
        ----------------
        
        * Initial release
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Libraries :: Python Modules
